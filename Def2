#include "core/core.hpp"
#include "shared/ctx.hpp"
#include "shared/defer.hpp"
#include "shared/ipc.hpp"
#include "shared/strings.hpp"

#include <thread>

namespace {
    void setup_window(const loader::Config& config) {
        if ((!config.from_autorun || config.verbose) && config.alloc_console) {
            shared::alloc_console();
        }
    }

    void setup_context(const loader::Config& config) {
        if (config.name.length() > shared::kMaxNameLength) {
            throw std::runtime_error("Name too long");
        }

        shared::ctx.state = config.disable ? shared::State::OFF : shared::State::ON;
        shared::ctx.verbose = config.verbose;
        std::ranges::copy(config.name, shared::ctx.name.data());

        if (!config.from_autorun) {
            shared::ctx.serialize();
        }
    }

    [[nodiscard]] HANDLE load_defendnot() {
        auto dll_path = shared::get_this_module_path().parent_path();
        dll_path /= strings::kDllName;
        if (!std::filesystem::exists(dll_path)) {
            throw std::runtime_error("DLL not found");
        }

        return loader::inject(dll_path.string(), strings::kVictimProcess);
    }

    void wait_for_finish(shared::InterProcessCommunication& ipc) {
        while (!ipc->finished) {
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
    }

    void process_autorun(const loader::Config& config) {
        if (shared::ctx.state == shared::State::ON && config.enable_autorun) {
            loader::add_to_autorun(config.autorun_type);
        } else {
            loader::remove_from_autorun();
        }
    }

    void banner(const loader::Config& config) {
        // Đã loại bỏ toàn bộ in banner
    }
} // namespace

int main(int argc, char* argv[]) try {
    // Cấu hình mặc định
    auto config = loader::Config{
        .name = "Test",
        .disable = false,
        .alloc_console = false,
        .verbose = false,
        .from_autorun = false,
        .autorun_type = loader::AutorunType::AS_CURRENT_USER_ON_LOGIN,
        .enable_autorun = true
    };

    setup_window(config);
    loader::ensure_environment();
    setup_context(config);

    auto ipc = shared::InterProcessCommunication(shared::InterProcessCommunicationMode::READ_WRITE, true);
    ipc->finished = false;

    const auto process = load_defendnot();
    defer->void {
        TerminateProcess(process, 0);
    };

    wait_for_finish(ipc);
    process_autorun(config);
    banner(config);

    return EXIT_SUCCESS;
} catch (std::exception&) {
    // Không in lỗi ra màn hình, cũng không pause
    return EXIT_FAILURE;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR lpCmdLine, int nCmdShow) {
    return main(__argc, __argv);
}
